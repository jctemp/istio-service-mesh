{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This repository gives more context regarding the setup of Istio's ambient mesh and traditional service mesh. It is using the <code>bookinfo</code> example to demonstate the performance difference between the two service meshes. Further, it is important to note that this is an academic example and that benchmarks are necessary to understand true behaviour. Nonetheless, the benchmark aims to show tendencies and the opportunity of the new approach.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>To perform the experiment, you will need the listed software below. With that, we can create a local cluster using <code>kind</code>. The <code>k9s</code> is just a command line interface allowing to browse the cluster.</p> <ul> <li>Docker Version 20.10.23</li> <li>Kubernetes CLI Version 1.26.1</li> <li>Go Version 1.19.5</li> <li>kind Version v0.17.0</li> <li>k9s Version 0.27.0 (optional)</li> </ul> <p>The next section contains a quick installation guide. Skip that if you already have the required software.</p>"},{"location":"benchmarks/","title":"Benchmarks","text":""},{"location":"clusters/","title":"Creating clusters","text":"<p>TODO</p> <pre><code>FILE=\"istio-0.0.0-ambient.191fe680b52c1754ee72a06b3e0d3f9d116f2e82-linux-amd64.tar.gz\"\nURL=\"https://storage.googleapis.com/istio-build/dev/0.0.0-ambient.191fe680b52c1754ee72a06b3e0d3f9d116f2e82\"\ncurl -LO \"$URL/$FILE\"\ncurl -LO \"$URL/$FILE.sha256\"\n</code></pre> <p>Verify the downloaded preview version.</p> <pre><code>echo $(cat $FILE.sha256) | sha256sum --check\n</code></pre> <p>TODO</p> <pre><code>DEST=istio-0.0.0-ambient\nmkdir $DEST &amp;&amp; tar xzf $FILE --strip-components 1 -C $DEST &amp;&amp; cd $DEST\n</code></pre> <p>TODO</p> <pre><code>ln -s $(pwd)/bin/istioctl /usr/local/bin/istioctl\n</code></pre> <p>TODO Now, follow the installation of the ambient mesh and bookinfo example.</p>"},{"location":"environment/","title":"Environment","text":"<p>For the benchmark, we have used a VPS with 4 cores and 8GB of RAM. The installed OS is Ubuntu 22.04.1, which offered in our testing best results. See detailed information below:</p> <pre><code>OS: Ubuntu 22.04.1 LTS x86_64\nHost: KVM/QEMU (Standard PC (i440FX + PIIX, 1996) Kernel: 5.15.0-25-generic\nShell: bash 5.1.16\nCPU: AMD EPYC 7282 (4) @ 2.794GHz\nMemory: 377MiB / 7951MiB\n</code></pre>"},{"location":"prerequisites/","title":"Quick guide","text":"<p>This is a quick guide to install all the dependencies. We only give the instructions for Ubuntu-based systems. Of course, we recommend to check the official websites.</p>"},{"location":"prerequisites/#system","title":"System","text":"<p>To make all the installations, we will need some other dependencies. Most can be installed via the native package manager.</p> <pre><code>sudo apt -y update\nsudo apt -y install ca-certificates curl gnupg lsb-release\n</code></pre>"},{"location":"prerequisites/#docker","title":"Docker","text":"<p>The docker documentation recommends to remove any existing docker installation.</p> <pre><code>apt remove docker docker-engine docker.io containerd runc\n</code></pre> <p>The next step does get the dockers signing key and add dockers repository to the native package manager.</p> <pre><code>mkdir -p /etc/apt/keyrings\ncurl -fsSL \"https://download.docker.com/linux/ubuntu/gpg\" |\nsudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \"https://download.docker.com/linux/ubuntu\" \\\n$(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt;/dev/null\n</code></pre> <p>Finally, docker explained that we have to change the installation pattern, if we do not want the latest version. Feel free adapting this section to your needs.</p> <pre><code>VERSION_STRING=5:20.10.23~3-0~ubuntu-jammy\nVERSION_AVAILABLE=$(apt-cache madison docker-ce | awk '{ print $3 }')\nif echo $VERSION_AVAILABLE | grep -q \"$VERSION_STRING\"; then sudo apt -y update\n    sudo apt -y install \\\ndocker-ce=$VERSION_STRING \\\ndocker-ce-cli=$VERSION_STRING \\\ncontainerd.io \\\ndocker-compose-plugin; fi\n</code></pre> <p>Depending on the system, it might be necessary to add the current user to a special group which grants access to the docker socket.</p> <pre><code>sudo groupadd docker\nsudo usermod -aG docker $USER\nnewgrp docker\n</code></pre>"},{"location":"prerequisites/#kubectl","title":"Kubectl","text":"<p>For <code>kubectl</code>, we recommend to follow the installation via <code>curl</code> because it is easier to ensure the same version.</p> <pre><code>VERSION=v1.26.1\n\ncurl -LO \"https://dl.k8s.io/release/$VERSION/bin/linux/amd64/kubectl\"\ncurl -LO \"https://dl.k8s.io/$VERSION/bin/linux/amd64/kubectl.sha256\"\n</code></pre> <p>Verify the downloaded <code>kubectl</code> executable.</p> <pre><code>echo \"$(cat kubectl.sha256) kubectl\" | sha256sum --check\n</code></pre> <p>Now, we can use the <code>install</code> command to add the <code>kubectl</code> executable to the local binaries path.</p> <pre><code>sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n</code></pre>"},{"location":"prerequisites/#kind","title":"Kind","text":"<p>The <code>kind</code> tool allows us to create a local cluster. There are other options available, like <code>k3d</code> or <code>minikube</code>. However, during testing we have found that <code>kind</code> worked best with the Istio preview version. Further, Istio used it for their demo.</p> <p>Similar to the <code>kubectl</code> executable, we will curl the binary of the <code>kind</code> tool.</p> <pre><code>VERSION=v0.17.0\nFILE=kind-linux-amd64\n\ncurl -Lo ./$FILE \"https://github.com/kubernetes-sigs/kind/releases/download/$VERSION/$FILE\"\ncurl -Lo ./$FILE.sha256 \"https://github.com/kubernetes-sigs/kind/releases/download/$VERSION/$FILE.sha256sum\"\n</code></pre> <p>Verify the downloaded <code>kind</code> executable.</p> <pre><code>echo \"$(cat $FILE.sha256)\" | sha256sum --check\n</code></pre> <p>Now, we can use the <code>install</code> command to add the <code>kubectl</code> executable to the local binaries path.</p> <pre><code>sudo install -o root -g root -m 0755 $FILE /usr/local/bin/kind\n</code></pre>"},{"location":"prerequisites/#k9s","title":"k9s","text":"<p>As previously mentioned, this part is optional. The <code>k9s</code> command line interface provides comfortable tooling with a great overview of a cluster. Nonetheless, working solely with <code>kubectl</code> is sufficient. Download the binary and unpack it.</p> <pre><code>FILE=k9s_Linux_arm64.tar.gz\ncurl -LO \"https://github.com/derailed/k9s/releases/download/v0.27.0/$FILE\"\ntar -xzf $FILE\n</code></pre> <p>Finally, install it.</p> <pre><code>sudo install -o root -g root -m 0755 ./k9s /usr/local/bin/k9s\n</code></pre>"},{"location":"sources/","title":"Sources","text":"<p>These are the source that were used to setup the service mesh.</p> <ul> <li>Ambient mesh setup</li> <li>Ambient mesh introduction</li> <li>Dashboard setup</li> </ul>"}]}